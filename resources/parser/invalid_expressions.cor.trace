L1: 0000 IncGlobalCount
    0001 Nil
L2: 0002 Int(1) -> 1
    0003 Nil
    0004 Binary(Add)
    0005 StoreGlobal(0) -> x
    0006 Pop
L3: 0007 Nil
    0008 Unary(Minus)
    0009 StoreGlobal(0) -> x
    0010 Pop
L4: 0011 NativeFunction(Print)
    0012 Nil
    0013 Swap
    0014 OpFuncEval(1)
    0015 StoreGlobal(0) -> x
    0016 Pop
L5: 0017 NativeFunction(Print)
    0018 StoreGlobal(0) -> x
    0019 Pop
L6: 0020 NativeFunction(Print)
    0021 Int(2) -> 4
    0022 Nil
    0023 OpFuncEval(2)
    0024 StoreGlobal(0) -> x
    0025 Pop
L7: 0026 NativeFunction(Print)
    0027 Int(3) -> 5
    0028 OpFuncEval(1)
    0029 StoreGlobal(0) -> x
    0030 Pop
L8: 0031 Nil
    0032 StoreGlobal(0) -> x
    0033 Pop
    0034 Pop
    0035 Exit
Expected an expression terminal, got '+' token instead
  at: line 2 (invalid_expressions.cor)

2 | do { x = 1 + + 3 }
3 |              ^

Expected an expression terminal, got '+' token instead
  at: line 3 (invalid_expressions.cor)

3 | do { x = - + 2 }
4 |            ^

Expected an expression terminal, got '.' token instead
  at: line 4 (invalid_expressions.cor)

4 | do { x = print .. 3 }
5 |                 ^

Expecting a statement, got integer '3' instead
  at: line 5 (invalid_expressions.cor)

5 | do { x = print 3 }
6 |                ^

Expected an expression terminal, got ',' token instead
  at: line 6 (invalid_expressions.cor)

6 | do { x = print (4 ,, 5) }
7 |                    ^

Expected a ',' or ')' after function invocation, got integer '6' instead
  at: line 7 (invalid_expressions.cor)

7 | do { x = print (5 6) }
8 |                   ^

Expected an expression terminal, got '.' token instead
  at: line 8 (invalid_expressions.cor)

8 | do { x = .. 3 }
9 |          ^
