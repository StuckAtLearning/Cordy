=== Parse Tokens ===

0000 LineNumber(1)
0001 Nil
0002 Int(0 -> 1)
0003 Nil
0004 OpAdd
0005 StoreLocal(0)
0006 LineNumber(2)
0007 Nil
0008 UnarySub
0009 StoreLocal(0)
0010 LineNumber(3)
0011 Bound(Print)
0012 Nil
0013 OpFuncCompose
0014 StoreLocal(0)
0015 LineNumber(4)
0016 Bound(Print)
0017 StoreLocal(0)
0018 LineNumber(5)
0019 Bound(Print)
0020 Int(1 -> 4)
0021 Nil
0022 OpFuncEval(2)
0023 StoreLocal(0)
0024 LineNumber(6)
0025 Bound(Print)
0026 Int(2 -> 5)
0027 OpFuncEval(1)
0028 StoreLocal(0)
0029 LineNumber(7)
0030 Pop
0031 Exit

=== Parse Errors ===

ParserError { error: ExpectedExpressionTerminal(Plus), lineno: 1 }
ParserError { error: ExpectedExpressionTerminal(Plus), lineno: 2 }
ParserError { error: ExpectedExpressionTerminal(Dot), lineno: 3 }
ParserError { error: ExpectedStatement(Int(3)), lineno: 4 }
ParserError { error: ExpectedExpressionTerminal(Comma), lineno: 5 }
ParserError { error: ExpectedCommaOrEndOfArguments(Int(6)), lineno: 6 }

=== Formatted Parse Errors ===

Expected an expression terminal, got '+' token instead
  at: line 2 (invalid_expressions.cor)
  at:

{ x = 1 + + 3 }

Expected an expression terminal, got '+' token instead
  at: line 3 (invalid_expressions.cor)
  at:

{ x = - + 2 }

Expected an expression terminal, got '.' token instead
  at: line 4 (invalid_expressions.cor)
  at:

{ x = print .. 3 }

Expecting a statement, got integer '3' instead
  at: line 5 (invalid_expressions.cor)
  at:

{ x = print 3 }

Expected an expression terminal, got ',' token instead
  at: line 6 (invalid_expressions.cor)
  at:

{ x = print (4 ,, 5) }

Expected a ',' or ')' after function invocation, got integer '6' instead
  at: line 7 (invalid_expressions.cor)
  at:

{ x = print (5 6) }
