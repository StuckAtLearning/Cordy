=== Globals ===

"x" : 0

=== Parse Tokens ===

0000 LineNumber(1)
0001 Nil
0002 StoreGlobal(0)
0003 Int(0 -> 1)
0004 Nil
0005 OpAdd
0006 StoreGlobal(0)
0007 LineNumber(2)
0008 Nil
0009 UnarySub
0010 StoreGlobal(0)
0011 LineNumber(3)
0012 Bound(Print)
0013 Nil
0014 OpFuncCompose
0015 StoreGlobal(0)
0016 LineNumber(4)
0017 Bound(Print)
0018 StoreGlobal(0)
0019 LineNumber(5)
0020 Bound(Print)
0021 Int(1 -> 4)
0022 Nil
0023 OpFuncEval(2)
0024 StoreGlobal(0)
0025 LineNumber(6)
0026 Bound(Print)
0027 Int(2 -> 5)
0028 OpFuncEval(1)
0029 StoreGlobal(0)
0030 LineNumber(7)
0031 Exit

=== Parse Errors ===

ParserError { error: ExpectedExpressionTerminal(Plus), lineno: 1 }
ParserError { error: ExpectedExpressionTerminal(Plus), lineno: 2 }
ParserError { error: ExpectedExpressionTerminal(Dot), lineno: 3 }
ParserError { error: ExpectedStatement(Int(3)), lineno: 4 }
ParserError { error: ExpectedExpressionTerminal(Comma), lineno: 5 }
ParserError { error: ExpectedCommaOrEndOfArguments(Int(6)), lineno: 6 }

=== Formatted Parse Errors ===

Expected an expression terminal, got '+' token instead
  at: line 2 (invalid_expressions.cor)
  at:

{ x = 1 + + 3 }

Expected an expression terminal, got '+' token instead
  at: line 3 (invalid_expressions.cor)
  at:

{ x = - + 2 }

Expected an expression terminal, got '.' token instead
  at: line 4 (invalid_expressions.cor)
  at:

{ x = print .. 3 }

Expecting a statement, got integer '3' instead
  at: line 5 (invalid_expressions.cor)
  at:

{ x = print 3 }

Expected an expression terminal, got ',' token instead
  at: line 6 (invalid_expressions.cor)
  at:

{ x = print (4 ,, 5) }

Expected a ',' or ')' after function invocation, got integer '6' instead
  at: line 7 (invalid_expressions.cor)
  at:

{ x = print (5 6) }
